# SPDX-FileCopyrightText: 2024 German Aerospace Center (DLR)
# SPDX-License-Identifier: Apache-2.0

# Generated by Django 3.2.3 on 2021-07-12 13:05
from src.api.fixtures.initial_data import COMPARTMENTS, NODES, PARAMETERS, RESTRICTIONS, SIMULATION_MODELS, GROUP_CATEGORIES, GROUPS
from django.db import migrations


def fillin_restrictions(apps, schema_editor):
    """Add all currently used restrictions to the database"""
    Restriction = apps.get_model('api', 'Restriction')

    for r in RESTRICTIONS:
        restriction = Restriction(name=r, contact_rate=0.5)
        restriction.save()


def fillin_parameters(apps, schema_editor):
    """Add all currently used parameters to the database"""
    Parameter = apps.get_model('api', 'Parameter')

    for p in PARAMETERS:
        parameter = Parameter(key=p.lower(), name=p)
        parameter.save()


def fillin_compartments(apps, schema_editor):
    """Add all currently available compartments to the database"""
    Compartment = apps.get_model('api', 'Compartment')

    for c in COMPARTMENTS:
        compartment = Compartment(key=c.lower(), name=c)
        compartment.save()


def fillin_groups(apps, schema_editor):
    """Add all currently available group categories and groups to the database"""
    GroupCategory = apps.get_model('api', 'GroupCategory')
    Group = apps.get_model('api', 'Group')

    for c in GROUP_CATEGORIES:
        category = GroupCategory(key=c[0], name=c[0], description=c[1])
        category.save()

    for g in GROUPS:
        group = Group(key=g[0], category=GroupCategory.objects.get(key=g[1]), name=g[0], description=g[2])
        group.save()


def fillin_simulation_models(apps, schema_editor):
    """Add all currently available simulation models to the database"""
    Parameter = apps.get_model('api', 'Parameter')
    Compartments = apps.get_model('api', 'Compartment')
    SimulationModel = apps.get_model('api', 'SimulationModel')

    for s in SIMULATION_MODELS.keys():
        m = SIMULATION_MODELS.get(s)
        parameters = m.get('parameters')
        compartments = m.get('compartments')

        model = SimulationModel(key=s, name=s)
        model.save()

        for p in parameters:
            parameter = Parameter.objects.get(name=p)
            model.parameters.add(parameter)

        for c in compartments:
            compartment = Compartments.objects.get(name=c)
            model.compartments.add(compartment)

        model.save()


def fillin_nodes(apps, schema_editor):
    """Add all german counties to the database"""
    Node = apps.get_model('api', 'Node')

    for n in NODES:
        node = Node(name=n.get('key'), metadata=n)
        node.save()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_create_views'),
    ]

    operations = [
        migrations.RunPython(fillin_nodes),
        migrations.RunPython(fillin_restrictions),
        migrations.RunPython(fillin_parameters),
        migrations.RunPython(fillin_compartments),
        migrations.RunPython(fillin_groups),
        migrations.RunPython(fillin_simulation_models)
    ]

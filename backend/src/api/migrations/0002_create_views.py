# SPDX-FileCopyrightText: 2024 German Aerospace Center (DLR)
# SPDX-License-Identifier: Apache-2.0

# Generated by Django 3.2.3 on 2022-05-04 07:30

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
         ('api', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            sql = "CREATE VIEW api_simulationdata AS \
                SELECT  \
                    api_dataentry.id as id , \
                    api_simulationnode_data.simulationnode_id as simulationnode_id, \
                    api_node.id as node_id, \
                    api_node.name as node_name, \
                    api_dataentry.day as day, \
                    api_dataentry.percentile as percentile, \
                    api_dataentry.data as data, \
                    string_agg(api_group.key, ',') as groups \
                FROM api_dataentry   \
                INNER JOIN api_simulationnode_data \
                    ON (api_dataentry.id = api_simulationnode_data.dataentry_id) \
                INNER JOIN api_simulationnode \
                    ON (api_simulationnode.id = api_simulationnode_data.simulationnode_id) \
                INNER JOIN api_scenarionode \
                    ON (api_scenarionode.id = api_simulationnode.scenario_node_id) \
                INNER JOIN api_node \
                    ON (api_node.id = api_scenarionode.node_id) \
                INNER JOIN api_dataentry_groups \
                    ON (api_dataentry.id = api_dataentry_groups.dataentry_id) \
                INNER JOIN api_group \
                    ON (api_group.key = api_dataentry_groups.group_id) \
                GROUP BY 1, 2, 3, 4, 5, 6, 7 \
                ORDER BY api_dataentry.day ASC;",

            reverse_sql = "DROP VIEW IF EXISTS api_simulationdata"
        ),
        migrations.RunSQL(
            sql = "CREATE VIEW api_rkidata AS \
                SELECT  \
                    api_dataentry.id as id , \
                    api_rkinode_data.rkinode_id as rkinode_id, \
                    api_node.id as node_id, \
                    api_node.name as node_name, \
                    api_dataentry.day as day, \
                    api_dataentry.percentile as percentile, \
                    api_dataentry.data as data, \
                    string_agg(api_group.key, ',') as groups \
                FROM api_dataentry   \
                INNER JOIN api_rkinode_data \
                    ON (api_dataentry.id = api_rkinode_data.dataentry_id) \
                INNER JOIN api_rkinode \
                    ON (api_rkinode.id = api_rkinode_data.rkinode_id) \
                INNER JOIN api_node \
                    ON (api_node.id = api_rkinode.node_id) \
                INNER JOIN api_dataentry_groups \
                    ON (api_dataentry.id = api_dataentry_groups.dataentry_id) \
                INNER JOIN api_group \
                    ON (api_group.key = api_dataentry_groups.group_id) \
                GROUP BY 1, 2, 3, 4, 5, 6, 7 \
                ORDER BY api_dataentry.day ASC;",

            reverse_sql = "DROP VIEW IF EXISTS api_rkidata"
        )
    ]
